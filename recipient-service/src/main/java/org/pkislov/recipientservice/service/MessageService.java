package org.pkislov.recipientservice.service;import com.fasterxml.jackson.databind.ObjectMapper;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.pkislov.recipientservice.dto.MessageDto;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.stereotype.Service;import java.io.IOException;import java.util.ArrayList;import java.util.Collections;import java.util.List;@Slf4j@Service@RequiredArgsConstructorpublic class MessageService {    private final RabbitTemplate rabbitTemplate;    private final List<MessageDto> messageStore = Collections.synchronizedList(new ArrayList<>());    private final ObjectMapper objectMapper = new ObjectMapper();    public List<MessageDto> getMessagesAndClean() {        var list = List.copyOf(messageStore);        log.info("Found {} messages", list.size());        messageStore.clear();        return list;    }    public void receiveMessages() {        log.info("Scheduler running. Checking for messages...");        var message = rabbitTemplate.receive("messageQueue");        if (message != null) {            try {                var messageDto = objectMapper.readValue(message.getBody(), MessageDto.class);                messageStore.add(messageDto);                log.info("Received and processed message: {}", messageDto);            } catch (IOException e) {                log.error("Failed to deserialize message: {}", new String(message.getBody()), e);            }        }    }}